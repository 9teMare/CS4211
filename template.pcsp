// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header
enum {SP, LP, LS, FI, VO, HD};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var atkMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

var defForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)]; // will be compared to atkDefPos, C -> CL/CR, LR -> L, RL -> R
var defMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)]; // will be compared to atkMidPos
var defDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)]; // will be compared to atkForPos

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
AtkKep = [pos[C] == 1]Kep_1({ak_shortPass}, {ak_longPass}, C);

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
AtkDef = [pos[R] == 1]Def({ard_shortPass}, {ard_longPass}, {ard_probLoseBall}, R) [] [pos[CR] == 1]Def({acrd_shortPass}, {acrd_longPass}, {acrd_probLoseBall}, CR) [] [pos[CL] == 1]Def({acld_shortPass}, {acld_longPass}, {acld_probLoseBall}, CL) [] [pos[L] == 1]Def({ald_shortPass}, {ald_longPass}, {ald_probLoseBall}, L);

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
AtkMid = [pos[RL] == 1]Mid({arm_shortPass}, {arm_longPass}, {arm_longShot}, {arm_probLoseBall}, RL) [] [pos[C] == 1]Mid({acm_shortPass}, {acm_longPass}, {acm_longShot}, {acm_probLoseBall}, C) [] [pos[LR] == 1]Mid({alm_shortPass}, {alm_longPass}, {alm_longShot}, {alm_probLoseBall}, LR);
AtkFor = [pos[RL] == 1]For({arf_finish}, {arf_longShot}, {arf_volley}, {arf_header}, {arf_probLoseBall}, RL) [] [pos[C] == 1]For({amf_finish}, {amf_longShot}, {amf_volley}, {amf_header}, {amf_probLoseBall}, C) [] [pos[LR] == 1]For({alf_finish}, {alf_longShot}, {alf_volley}, {alf_header}, {alf_probLoseBall}, LR);

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
DefKep = [pos[C] == 1]Kep_2({dk_gkRating}, C);
// Home team defenders are just defending outfield players that quit
DefDef = [pos[R] == 1]Def_outfield(R) [] [pos[CR] == 1]Def_outfield(CR) [] [pos[CL] == 1]Def_outfield(CL) [] [pos[L] == 1]Def_outfield(L);

DefMid = [pos[RL] == 1]Def_outfield(RL) [] [pos[C] == 1]Def_outfield(C) [] [pos[LR] == 1]Def_outfield(LR); 

DefFor = [pos[RL] == 1]Def_outfield(RL) [] [pos[C] == 1]Def_outfield(C) [] [pos[LR] == 1]Def_outfield(LR);



///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

Kep_1(shortPassRating, longPassRating, position) = [atkDefPos[position-2] == 1 || atkDefPos[position-1] == 1 || atkDefPos[position] == 1 || atkDefPos[position+1] == 1 || atkDefPos[position+2] == 1]shortPass -> pcase {
	shortPassRating: pass -> UpdatePos(position, SP); AtkDef
	100-shortPassRating: intercepted{danger = 5;} -> UpdatePos(position, TK); DefFor
} [] [atkDefPos[position-6] == 1 || atkDefPos[position-5] == 1 || atkDefPos[position-4] == 1 || atkDefPos[position-3] == 1 || atkDefPos[position+3] == 1 || atkDefPos[position+4] == 1 || atkDefPos[position+5] == 1 || atkDefPos[position+6] == 1]longPass -> pcase {
	longPassRating: pass -> UpdatePos(position, LP); AtkDef
	100-longPassRating: intercepted{danger = 5;} -> UpdatePos(position, TK); DefFor
};

Def(shortPassRating, longPassRating, probToLoseBall, position) = [atkMidPos[position-2] == 1 || atkMidPos[position-1] == 1 || atkMidPos[position] == 1 || atkMidPos[position+1] == 1 || atkMidPos[position+2] == 1]shortPass -> pcase {
	shortPassRating: pass -> UpdatePos(position, SP); AtkMid
	probToLoseBall: tackled{danger = 4;} -> UpdatePos(position, TK); DefMid
} [] [atkMidPos[position-6] == 1 || atkMidPos[position-5] == 1 || atkMidPos[position-4] == 1 || atkMidPos[position-3] == 1 || atkMidPos[position+3] == 1 || atkMidPos[position+4] == 1 || atkMidPos[position+5] == 1 || atkMidPos[position+6] == 1]longPass -> pcase {
	longPassRating: pass -> UpdatePos(position, LP); AtkMid
	probToLoseBall: tackled{danger = 4;} -> UpdatePos(position, TK); DefMid
};

Mid(shortPassRating, longPassRating, longShotRating, probToLoseBall, position) = [atkForPos[position-2] == 1 || atkForPos[position-1] == 1 || atkForPos[position] == 1 || atkForPos[position+1] == 1 || atkForPos[position+2] == 1]shortPass -> pcase {
	shortPassRating: pass -> UpdatePos(position, SP); AtkFor
	probToLoseBall: tackled{danger = 3;} -> UpdatePos(position, TK); DefDef
} [] [atkForPos[position-6] == 1 || atkForPos[position-5] == 1 || atkForPos[position-4] == 1 || atkForPos[position-3] == 1 || atkForPos[position+3] == 1 || atkForPos[position+4] == 1 || atkForPos[position+5] == 1 || atkForPos[position+6] == 1]longPass -> pcase {
	longPassRating: pass{inAir = true;} -> UpdatePos(position, LP); AtkFor
	probToLoseBall: tackled{danger = 3;} -> UpdatePos(position, TK); DefDef
} [] [defKepPos[C] == 1]longShot -> pcase {
	longShotRating: shoot -> UpdatePos(position, LS); DefKep
	probToLoseBall: tackled{danger = 3;} -> UpdatePos(position, TK); DefDef
};

For(finishRating, longShotRating, volleyRating, headerRating, probToLoseBall, position) = [defKepPos[C] == 1]finish -> pcase {
	finishRating: shoot -> UpdatePos(position, FI); DefKep
	probToLoseBall: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	longShotRating: shoot -> UpdatePos(position, LS); DefKep
	probToLoseBall: tackled{danger = 2;} -> UpdatePos(position, TK); DefKep
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	volleyRating: shoot -> UpdatePos(position, VO); DefKep
	probToLoseBall: tackled{danger = 2;} -> UpdatePos(position, TK); DefKep
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	headerRating: shoot -> UpdatePos(position, HD); DefKep
	probToLoseBall: tackled{danger = 2;} -> -> UpdatePos(position, TK); DefKep
};

Kep_2(gpRating, position) = attemptSave -> pcase {
	gpRating: save{danger = 1;} -> Skip
	100-gpRating: concede -> Skip
};

Def_outfield(position) = intercepted -> Skip; 

UpdatePos(position, e) = case {
	position == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == TK: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == TK: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip			
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == TK: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip			
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			e == TK: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip						
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	position == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == TK: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip									
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == TK: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip			
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == TK: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip			
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;